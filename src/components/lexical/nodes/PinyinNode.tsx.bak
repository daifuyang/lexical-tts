import {
  $applyNodeReplacement,
  $getSelection,
  $isRangeSelection,
  DOMConversionMap,
  DOMConversionOutput,
  DOMExportOutput,
  EditorConfig,
  NodeKey,
  SerializedTextNode,
  Spread,
  TextNode
} from "lexical";

export type SerializedPinyinNode = Spread<
  {
    pinyin: string;
  },
  SerializedTextNode
>;

function convertMentionElement(domNode: HTMLElement): DOMConversionOutput | null {
  const textContent = domNode.textContent;

  if (textContent !== null) {
    const node = $createPinyinNode(textContent);
    return {
      node
    };
  }

  return null;
}

export class PinyinNode extends TextNode {
  __pinyin: string;

  constructor(pinyin: string, key?: NodeKey) {
    super(pinyin, key);
    this.__pinyin = pinyin;
  }

  static getType(): string {
    return "pinyin";
  }

  static clone(node: PinyinNode): PinyinNode {
    return new PinyinNode(node.__pinyin, node.__key);
  }

  getPinyin(): string {
    return this.__pinyin;
  }

  setPinyin(pinyin: string): void {
    const writable = this.getWritable();
    writable.__pinyin = pinyin;
  }

  static importJSON(serializedNode: SerializedPinyinNode): PinyinNode {
    const node = $createPinyinNode(serializedNode.pinyin);
    node.setTextContent(serializedNode.text);
    node.setFormat(serializedNode.format);
    node.setDetail(serializedNode.detail);
    node.setMode(serializedNode.mode);
    node.setStyle(serializedNode.style);
    return node;
  }

  exportJSON(): SerializedPinyinNode {
    return {
      ...super.exportJSON(),
      pinyin: this.__pinyin,
      type: "pinyin",
      version: 1
    };
  }

  createDOM(config: EditorConfig): HTMLElement {
    const dom = super.createDOM(config);
    const element = document.createElement("span");
    element.textContent = "xing";
    dom.appendChild(element)
    return dom;
  }

  exportDOM(): DOMExportOutput {
    const element = document.createElement("span");
    element.setAttribute("data-lexical-pinyin", "true");
    element.textContent = this.__text;
    return { element };
  }

  static importDOM(): DOMConversionMap | null {
    return {
      span: (domNode: HTMLElement) => {
        if (!domNode.hasAttribute("data-lexical-pinyin")) {
          return null;
        }
        return {
          conversion: convertMentionElement,
          priority: 1
        };
      }
    };
  }

  updateDOM(prevNode: PinyinNode, dom: HTMLElement): boolean {
    // Returning false tells Lexical that this node does not need its
    // DOM element replacing with a new copy from createDOM.
    return false;
  }
}

export function $createPinyinNode(pinyin: string): PinyinNode {
  const pinyinNode = new PinyinNode(pinyin);
  return $applyNodeReplacement(pinyinNode);
}
