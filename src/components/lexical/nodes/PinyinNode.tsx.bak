import {
  DecoratorNode,
  EditorConfig,
  LexicalNode,
  NodeKey,
  Spread,
  $applyNodeReplacement,
  $getSelection,
  $isRangeSelection,
  SerializedLexicalNode,
  TextNode,
  $getNodeByKey,
  CLICK_COMMAND,
  COMMAND_PRIORITY_LOW,
  $isNodeSelection,
  LexicalEditor
} from "lexical";

import { addClassNamesToElement } from "@lexical/utils";
import * as React from "react";

import { Tag, message } from "antd";
import { CloseCircleOutlined } from "@ant-design/icons";

import clsx from "clsx";
import { useDispatch } from "react-redux";
import { closeFloat, setInitialState } from "@/redux/slice/initialState";
import { useLexicalComposerContext } from "@lexical/react/LexicalComposerContext";
import { useLexicalNodeSelection } from "@lexical/react/useLexicalNodeSelection";
import { mergeRegister } from "@lexical/utils";
import { useEffect, useRef } from "react";
import { Dispatch } from "@reduxjs/toolkit";
import { getDomRect } from "../utils/dom";

export type SerializedPinyinNode = Spread<
  {
    pinyin: string;
    text: string;
  },
  SerializedLexicalNode
>;

const Component = (props: any) => {
  const dispatch = useDispatch();
  const { pinyin, text, nodeKey } = props;
  const ref = useRef<any>(null);

  const [isSelected, setSelected, clearSelection] = useLexicalNodeSelection(nodeKey);

  const [editor] = useLexicalComposerContext();

  useEffect(() => {
    let isMounted = true;
    const unregister = mergeRegister(
      editor.registerCommand<MouseEvent>(
        CLICK_COMMAND,
        (event: MouseEvent & { target: any }) => {
          const { nodekey: eventNodeKey } = event.target?.dataset || {};
          if (eventNodeKey === nodeKey) {
            if (event.shiftKey) {
              setSelected(!isSelected);
            } else {
              clearSelection();
              setSelected(true);
            }
            return true;
          }
          return false;
        },
        COMMAND_PRIORITY_LOW
      )
    );

    return () => {
      isMounted = false;
      unregister();
    };
  }, [clearSelection, isSelected, editor]);

  useEffect(() => {
    editor.update(() => {
      if (ref.current) {
        const node = $getNodeByKey(nodeKey);
        if ($isPinyinNode(node) && ref.current != node.getTextElem()) {
          node.setTextElem(ref.current);
        }
      }
    });
  }, [ref, editor]);

  return (
    <span
      onClick={(e) => {
        e.stopPropagation();
        clearSelection();
        setSelected(true);
        $pinYinFloat(editor, dispatch);
      }}
    >
      <Tag
        bordered={false}
        closeIcon={<CloseCircleOutlined style={{ color: "#389e0d", fontSize: 14 }} />}
        onClose={(e) => {
          e.preventDefault();
          editor.update(() => {
            $removePinyin(nodeKey);
          });
        }}
        className={clsx({
          "editor-tag": true,
          "editor-pinyin-tag": true,
          "editor-green-tag": true
        })}
        color="green"
      >
        {pinyin}
      </Tag>
      <br />
      <span data-nodekey={nodeKey} className={clsx({ text: true, selected: isSelected })} ref={ref}>
        {text}
      </span>
    </span>
  );
};

export class PinyinNode extends DecoratorNode<JSX.Element> {
  __pinyin: string;
  __text: string;
  __textElem?: HTMLSpanElement;

  constructor(pinyin: string, text: string, textElem?: HTMLSpanElement, key?: NodeKey) {
    super(key);
    this.__pinyin = pinyin;
    this.__text = text;
    this.__textElem = textElem;
  }

  static getType(): string {
    return "pinyin";
  }

  getPinyin() {
    return this.__pinyin;
  }

  setPinyin(pinyin: string) {
    const writable = this.getWritable();
    writable.__pinyin = pinyin;
  }

  getText() {
    return this.__text;
  }

  getTextElem() {
    return this.__textElem;
  }

  setTextElem(elem: HTMLSpanElement) {
    const writable = this.getWritable();
    writable.__textElem = elem;
  }

  static clone(node: PinyinNode): PinyinNode {
    return new PinyinNode(node.__pinyin, node.__text, node.__textElem, node.__key);
  }

  static importJSON(serializedNode: SerializedPinyinNode): PinyinNode {
    const node = $createPinyinNode(serializedNode.pinyin, serializedNode.text);
    return node;
  }

  exportJSON(): SerializedPinyinNode {
    return {
      ...super.exportJSON(),
      pinyin: this.__pinyin,
      text: this.__text,
      type: this.getType(),
      version: 1
    };
  }

  createDOM(config: EditorConfig): HTMLElement {
    const element = document.createElement("span");
    addClassNamesToElement(element, config.theme.pinyin, "editor-span");
    return element;
  }

  updateDOM(): false {
    return false;
  }

  getTextContent(): string {
    return this.__text;
  }

  isInline(): boolean {
    return true
}

  decorate(): JSX.Element {
    return <Component nodeKey={this.getKey()} pinyin={this.__pinyin} text={this.__text} />;
  }
}

export function $createPinyinNode(pinyin: string, text: string): PinyinNode {
  return $applyNodeReplacement(new PinyinNode(pinyin, text));
}

export function $isPinyinNode(
  node: PinyinNode | LexicalNode | null | undefined
): node is PinyinNode {
  return node instanceof PinyinNode;
}

export function $addPinyin(pinyin: string): void {
  const selection = $getSelection();
  if (!$isRangeSelection(selection)) {
    return;
  }
  const nodes = selection.extract();
  if (nodes.length > 0) {
    const node = nodes[0];
    const pinyinNode = $createPinyinNode(pinyin, (node as TextNode).__text);
    node.insertAfter(pinyinNode);
    pinyinNode.selectEnd();
    node.remove();
  }
}

export function $removePinyin(nodekey: string) {
  const pinyinNode = $getNodeByKey(nodekey);
  pinyinNode?.selectEnd();
  const selection = $getSelection();
  const text = (pinyinNode as PinyinNode).getText();
  selection?.insertText(text);
  pinyinNode?.remove();
}

export function $pinYinFloat(editor: LexicalEditor, dispatch: Dispatch<any>): void {
  // 新增编辑逻辑合并，打开拼音选择弹窗

  editor.update(() => {
    const selection = $getSelection();
    if (selection) {
      if ($isNodeSelection(selection)) {
        // 修改更新
        const nodes = selection.extract();
        if (nodes.length > 0) {
          const pinyinNode = nodes[0];

          if ($isPinyinNode(pinyinNode)) {
            const nodeKey = pinyinNode.getKey();
            const elem = pinyinNode.getTextElem();
            const domRect = getDomRect(elem);

            if (domRect) {
              dispatch(
                setInitialState({
                  type: "pinyin",
                  domRect,
                  selectionText: pinyinNode.getText(),
                  nodeKey,
                  value: pinyinNode.getPinyin()
                })
              );
            }
          }
        }

        return;
      }

      const text = selection?.getTextContent();
      if (!text) {
        message.error("请先选中文字!");
        dispatch(closeFloat());
        return;
      } else if (text.length > 1) {
        message.error("请选择单个汉字!");
        dispatch(closeFloat());
        return;
      } else if (!/^[\u4E00-\u9FFF]+$/.test(text)) {
        message.error("请选择单个汉字!");
        dispatch(closeFloat());
        return;
      }
      dispatch(setInitialState({ type: "pinyin", selectionText: text, value: undefined }));
    }
  });
}
